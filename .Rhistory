pars$C_AB1 <- vcov_out["a", "b1"]
pars$C_AB2 <- vcov_out["a", "b2"]
pars$C_B1B2 <- vcov_out["b1", "b2"]
pars$state <- unique(st_d$State)
pars$algo <- "nl2sol"
}
} if (is.null(mod) == FALSE){
state
mod <- tryCatch(nls(formula = totalTransfers ~ a + b1 * exp((b2) * Y),
data = st_d,
start = list(a = 1,
b1 = 2,
b2 = -0.1),
weights = asecwt),
error = function(e) NULL)
if(is.null(mod) == TRUE){
mod_port <- tryCatch(nls(formula = totalTransfers ~ a + b1 * exp((b2) * Y),
data = st_d,
start = list(a = 1,
b1 = 2,
b2 = -0.1),
algorithm = "port",
weights = asecwt),
error = function(e) NULL)
if(is.null(mod_port) == TRUE){
mod_port_newstart <- nls(formula = totalTransfers ~ a + b1 * exp((b2) * Y),
data = st_d,
start = list(a = as.numeric(parameters_no_weights[parameters_no_weights$state_Rnls == unique(st_d$State),
"a_Rnls"]),
b1 = as.numeric(parameters_no_weights[parameters_no_weights$state_Rnls == unique(st_d$State),
"b1_Rnls"]),
b2 = as.numeric(parameters_no_weights[parameters_no_weights$state_Rnls == unique(st_d$State),
"b2_Rnls"])),
algorithm = "port",
control = list(maxiter = 1000, tol = 1e-05, scaleOffset = 1),
trace = TRUE,
weights = asecwt)
pars <- as.data.frame(t(mod_port_newstart$m$getPars()))
vcov_out <- as.data.frame(vcov(mod_port_newstart))
pars$V_A <- vcov_out["a", "a"]
pars$V_B1 <- vcov_out["b1", "b1"]
pars$V_B2 <- vcov_out["b2", "b2"]
pars$C_AB1 <- vcov_out["a", "b1"]
pars$C_AB2 <- vcov_out["a", "b2"]
pars$C_B1B2 <- vcov_out["b1", "b2"]
pars$state <- unique(st_d$State)
pars$algo <- "port, new start init"
} else if(is.null(mod_port_newstart) == TRUE){
pars <- as.data.frame(matrix(NA, nrow = 1, ncol = 11))
colnames(pars) <- c("a", "b1", "b2", "V_A", "V_B1", "V_B2", "C_AB1", "C_AB2", "C_B1B2", "state", "algo")
pars$state <- unique(st_d$State)
pars$algo <- "no solution"
}
} else if (is.null(mod_port) == FALSE){
pars <- as.data.frame(t(mod_port$m$getPars()))
vcov_out <- as.data.frame(vcov(mod_port))
pars$V_A <- vcov_out["a", "a"]
pars$V_B1 <- vcov_out["b1", "b1"]
pars$V_B2 <- vcov_out["b2", "b2"]
pars$C_AB1 <- vcov_out["a", "b1"]
pars$C_AB2 <- vcov_out["a", "b2"]
pars$C_B1B2 <- vcov_out["b1", "b2"]
pars$state <- unique(st_d$State)
pars$algo <- "nl2sol"
}
state_mods_wt_TMP <- lapply(loop_states, function(state){
st_d <- cps[cps$state_al == state,]
mod <- tryCatch(nls(formula = totalTransfers ~ a + b1 * exp((b2) * Y),
data = st_d,
start = list(a = 1,
b1 = 2,
b2 = -0.1),
weights = asecwt),
error = function(e) NULL)
if(is.null(mod) == TRUE){
mod_port <- tryCatch(nls(formula = totalTransfers ~ a + b1 * exp((b2) * Y),
data = st_d,
start = list(a = 1,
b1 = 2,
b2 = -0.1),
algorithm = "port",
weights = asecwt),
error = function(e) NULL)
if(is.null(mod_port) == TRUE){
mod_port_newstart <- nls(formula = totalTransfers ~ a + b1 * exp((b2) * Y),
data = st_d,
start = list(a = as.numeric(parameters_no_weights[parameters_no_weights$state_Rnls == unique(st_d$State),
"a_Rnls"]),
b1 = as.numeric(parameters_no_weights[parameters_no_weights$state_Rnls == unique(st_d$State),
"b1_Rnls"]),
b2 = as.numeric(parameters_no_weights[parameters_no_weights$state_Rnls == unique(st_d$State),
"b2_Rnls"])),
algorithm = "port",
control = list(maxiter = 1000, tol = 1e-05, scaleOffset = 1),
trace = TRUE,
weights = asecwt)
pars <- as.data.frame(t(mod_port_newstart$m$getPars()))
vcov_out <- as.data.frame(vcov(mod_port_newstart))
pars$V_A <- vcov_out["a", "a"]
pars$V_B1 <- vcov_out["b1", "b1"]
pars$V_B2 <- vcov_out["b2", "b2"]
pars$C_AB1 <- vcov_out["a", "b1"]
pars$C_AB2 <- vcov_out["a", "b2"]
pars$C_B1B2 <- vcov_out["b1", "b2"]
pars$state <- unique(st_d$State)
pars$algo <- "port, new start init"
} else if (is.null(mod_port) == FALSE){
pars <- as.data.frame(t(mod_port$m$getPars()))
vcov_out <- as.data.frame(vcov(mod_port))
pars$V_A <- vcov_out["a", "a"]
pars$V_B1 <- vcov_out["b1", "b1"]
pars$V_B2 <- vcov_out["b2", "b2"]
pars$C_AB1 <- vcov_out["a", "b1"]
pars$C_AB2 <- vcov_out["a", "b2"]
pars$C_B1B2 <- vcov_out["b1", "b2"]
pars$state <- unique(st_d$State)
pars$algo <- "nl2sol"
}
} else if (is.null(mod) == FALSE){
pars <- as.data.frame(t(mod$m$getPars()))
vcov_out <- as.data.frame(vcov(mod))
pars$V_A <- vcov_out["a", "a"]
pars$V_B1 <- vcov_out["b1", "b1"]
pars$V_B2 <- vcov_out["b2", "b2"]
pars$C_AB1 <- vcov_out["a", "b1"]
pars$C_AB2 <- vcov_out["a", "b2"]
pars$C_B1B2 <- vcov_out["b1", "b2"]
pars$state <- unique(st_d$State)
pars$algo <- "gnr"
}
return(pars)
})
state_mods_wt_TMP <- lapply(loop_states, function(state){
st_d <- cps[cps$state_al == state,]
mod <- tryCatch(nls(formula = totalTransfers ~ a + b1 * exp((b2) * Y),
data = st_d,
start = list(a = 1,
b1 = 2,
b2 = -0.1),
weights = asecwt),
error = function(e) NULL)
if(is.null(mod) == TRUE){
mod_port <- tryCatch(nls(formula = totalTransfers ~ a + b1 * exp((b2) * Y),
data = st_d,
start = list(a = 1,
b1 = 2,
b2 = -0.1),
algorithm = "port",
weights = asecwt),
error = function(e) NULL)
if(is.null(mod_port) == TRUE){
mod_port_newstart <- nls(formula = totalTransfers ~ a + b1 * exp((b2) * Y),
data = st_d,
start = list(a = as.numeric(parameters_no_weights[parameters_no_weights$state_Rnls == unique(st_d$State),
"a_Rnls"]),
b1 = as.numeric(parameters_no_weights[parameters_no_weights$state_Rnls == unique(st_d$State),
"b1_Rnls"]),
b2 = as.numeric(parameters_no_weights[parameters_no_weights$state_Rnls == unique(st_d$State),
"b2_Rnls"])),
algorithm = "port",
control = list(maxiter = 1000, tol = 1e-05, scaleOffset = 1),
weights = asecwt)
pars <- as.data.frame(t(mod_port_newstart$m$getPars()))
vcov_out <- as.data.frame(vcov(mod_port_newstart))
pars$V_A <- vcov_out["a", "a"]
pars$V_B1 <- vcov_out["b1", "b1"]
pars$V_B2 <- vcov_out["b2", "b2"]
pars$C_AB1 <- vcov_out["a", "b1"]
pars$C_AB2 <- vcov_out["a", "b2"]
pars$C_B1B2 <- vcov_out["b1", "b2"]
pars$state <- unique(st_d$State)
pars$algo <- "port, new start init"
} else if (is.null(mod_port) == FALSE){
pars <- as.data.frame(t(mod_port$m$getPars()))
vcov_out <- as.data.frame(vcov(mod_port))
pars$V_A <- vcov_out["a", "a"]
pars$V_B1 <- vcov_out["b1", "b1"]
pars$V_B2 <- vcov_out["b2", "b2"]
pars$C_AB1 <- vcov_out["a", "b1"]
pars$C_AB2 <- vcov_out["a", "b2"]
pars$C_B1B2 <- vcov_out["b1", "b2"]
pars$state <- unique(st_d$State)
pars$algo <- "nl2sol"
}
} else if (is.null(mod) == FALSE){
pars <- as.data.frame(t(mod$m$getPars()))
vcov_out <- as.data.frame(vcov(mod))
pars$V_A <- vcov_out["a", "a"]
pars$V_B1 <- vcov_out["b1", "b1"]
pars$V_B2 <- vcov_out["b2", "b2"]
pars$C_AB1 <- vcov_out["a", "b1"]
pars$C_AB2 <- vcov_out["a", "b2"]
pars$C_B1B2 <- vcov_out["b1", "b2"]
pars$state <- unique(st_d$State)
pars$algo <- "gnr"
}
return(pars)
})
state_mods_wt <- do.call(rbind, state_mods_wt_TMP)
colnames(state_mods_wt) <- paste(colnames(state_mods_wt), "_Rnls", sep = "")
View(state_mods_wt)
state_mods_wt_TMP <- lapply(loop_states, function(state){
st_d <- cps[cps$state_al == state,]
mod <- tryCatch(nls(formula = totalTransfers ~ a + b1 * exp((b2) * Y),
data = st_d,
start = list(a = 1,
b1 = 2,
b2 = -0.1),
weights = asecwt),
error = function(e) NULL)
if(is.null(mod) == TRUE){
mod_port <- tryCatch(nls(formula = totalTransfers ~ a + b1 * exp((b2) * Y),
data = st_d,
start = list(a = 1,
b1 = 2,
b2 = -0.1),
algorithm = "port",
weights = asecwt),
error = function(e) NULL)
if(is.null(mod_port) == TRUE){
mod_port_newstart <- nls(formula = totalTransfers ~ a + b1 * exp((b2) * Y),
data = st_d,
start = list(a = as.numeric(parameters_no_weights[parameters_no_weights$state_Rnls == unique(st_d$State),
"a_Rnls"]),
b1 = as.numeric(parameters_no_weights[parameters_no_weights$state_Rnls == unique(st_d$State),
"b1_Rnls"]),
b2 = as.numeric(parameters_no_weights[parameters_no_weights$state_Rnls == unique(st_d$State),
"b2_Rnls"])),
algorithm = "port",
control = list(maxiter = 1000, tol = 1e-05, scaleOffset = 1),
weights = asecwt)
pars <- as.data.frame(t(mod_port_newstart$m$getPars()))
vcov_out <- as.data.frame(vcov(mod_port_newstart))
pars$V_A <- vcov_out["a", "a"]
pars$V_B1 <- vcov_out["b1", "b1"]
pars$V_B2 <- vcov_out["b2", "b2"]
pars$C_AB1 <- vcov_out["a", "b1"]
pars$C_AB2 <- vcov_out["a", "b2"]
pars$C_B1B2 <- vcov_out["b1", "b2"]
pars$state <- unique(st_d$State)
pars$algo <- "nl2sol, new start init"
} else if (is.null(mod_port) == FALSE){
pars <- as.data.frame(t(mod_port$m$getPars()))
vcov_out <- as.data.frame(vcov(mod_port))
pars$V_A <- vcov_out["a", "a"]
pars$V_B1 <- vcov_out["b1", "b1"]
pars$V_B2 <- vcov_out["b2", "b2"]
pars$C_AB1 <- vcov_out["a", "b1"]
pars$C_AB2 <- vcov_out["a", "b2"]
pars$C_B1B2 <- vcov_out["b1", "b2"]
pars$state <- unique(st_d$State)
pars$algo <- "nl2sol"
}
} else if (is.null(mod) == FALSE){
pars <- as.data.frame(t(mod$m$getPars()))
vcov_out <- as.data.frame(vcov(mod))
pars$V_A <- vcov_out["a", "a"]
pars$V_B1 <- vcov_out["b1", "b1"]
pars$V_B2 <- vcov_out["b2", "b2"]
pars$C_AB1 <- vcov_out["a", "b1"]
pars$C_AB2 <- vcov_out["a", "b2"]
pars$C_B1B2 <- vcov_out["b1", "b2"]
pars$state <- unique(st_d$State)
pars$algo <- "gnr"
}
return(pars)
})
state_mods_wt <- do.call(rbind, state_mods_wt_TMP)
colnames(state_mods_wt) <- paste(colnames(state_mods_wt), "_Rnls", sep = "")
sims_wt_TMP <- lapply(loop_states, function(state){
st_d <- cps[cps$state_al == state,]
st_d <- cps[cps$state_al == state,]
mod <- tryCatch(nls(formula = totalTransfers ~ a + b1 * exp((b2) * Y),
data = st_d,
start = list(a = 1,
b1 = 2,
b2 = -0.1),
weights = asecwt),
error = function(e) NULL)
if(is.null(mod) == TRUE){
mod <- tryCatch(nls(formula = totalTransfers ~ a + b1 * exp((b2) * Y),
data = st_d,
start = list(a = 1,
b1 = 2,
b2 = -0.1),
algorithm = "port",
weights = asecwt),
error = function(e) NULL)
if(is.null(mod) == TRUE){
mod <- nls(formula = totalTransfers ~ a + b1 * exp((b2) * Y),
data = st_d,
start = list(a = as.numeric(parameters_no_weights[parameters_no_weights$state_Rnls == unique(st_d$State),
"a_Rnls"]),
b1 = as.numeric(parameters_no_weights[parameters_no_weights$state_Rnls == unique(st_d$State),
"b1_Rnls"]),
b2 = as.numeric(parameters_no_weights[parameters_no_weights$state_Rnls == unique(st_d$State),
"b2_Rnls"])),
algorithm = "port",
control = list(maxiter = 1000, tol = 1e-05, scaleOffset = 1),
weights = asecwt)
}
}
pars_out <- mod$m$getPars()
vcov_out <- vcov(mod)
set.seed(02143)
sims <- as.data.frame(MASS::mvrnorm(n = 1000, mu = pars_out, Sigma = vcov_out))
sims$state <- state
as.data.frame(sims)
})
sims_out_wt_TMP <- do.call(rbind, sims_wt_TMP)
head(sims_out_wt_TMP)
pes_wt_with_sims <- right_join(state_mods_wt, sims_wt_out, by = c("state_Rnls" = "State"))
sims_out_wt_TMP <- do.call(rbind, sims_wt_TMP)
sims_wt_out <- left_join(sims_out_wt_TMP, state_list, by = c("state" = "state_alpha"))
pes_wt_with_sims <- right_join(state_mods_wt, sims_wt_out, by = c("state_Rnls" = "State"))
dim(pes_wt_with_sims) # 50000 x 15. All good here!
baseline_estimates_weights <- cbind.data.frame(pes_wt_with_sims, tau_l[,100]) %>%
group_by(state_Rnls) %>%
summarize_if(is.numeric, mean) %>%
rename(tau = `tau_l[, 100]`)
psi <- 19.790     # this is the poverty threshold
tau <- 0.7* psi   # this is the starting value of tau before the search algorithm
# tau will be generated by finding the intersection of the poverty threshold and state support
tau_j <- matrix(NA, nrow = nrow(pes_wt_with_sims), ncol = 100)
test_j <- matrix(NA, nrow = nrow(pes_wt_with_sims), ncol = 100)
tau_new_j <- matrix(NA, nrow(pes_wt_with_sims), ncol = 100)
tau_j[,1] <- tau + .1
test_j[,1] <- (psi - tau_j[1]) - (pes_wt_with_sims$a+pes_wt_with_sims$b1*exp(pes_wt_with_sims$b2*tau_j[1]))
tau_j[,1] <- ifelse( test_j[,1] < .1 &  test_j[,1] > 0,  tau_j[1], tau)
j <- 2
for(j in 2:100){
tau_j[,j]  <- tau_j[, j-1] + j*.1
test_j[,j] <- (psi - tau_j[,j]) - (pes_wt_with_sims$a+pes_wt_with_sims$b1*exp(pes_wt_with_sims$b2*tau_j[,j] ))
tau_j[,j] <- ifelse(test_j[,j] < .1 &  test_j[,j] > 0,  tau_j[,j], tau_j[,j-1])
j <- j + 1
}
tau_k <- matrix(NA, nrow = nrow(pes_wt_with_sims), ncol = 100)
test_k <- matrix(NA, nrow = nrow(pes_wt_with_sims), ncol = 100)
tau_k[,1] <- tau_j[, 100] + .01
test_k[,1] <- (psi - tau_k[1]) - (pes_wt_with_sims$a+pes_wt_with_sims$b1*exp(pes_wt_with_sims$b2*tau_k[,1]))
tau_k[,1] <- ifelse( test_k[,1] < .01 &  test_k[,1] > 0,  tau_k[,1], tau_j[, 100])
k <- 2
for(k in 2:100){
tau_k[,k]  <- tau_k[, k-1] + k*.01
test_k[,k] <- (psi - tau_k[,k]) - (pes_wt_with_sims$a+pes_wt_with_sims$b1*exp(pes_wt_with_sims$b2*tau_k[,k] ))
tau_k[,k] <- ifelse(test_k[,k] < .01 &  test_k[,k] > 0,  tau_k[,k], tau_k[,k-1])
k <- k + 1
}
tau_l <- matrix(NA, nrow = nrow(pes_wt_with_sims), ncol = 100)
test_l <- matrix(NA, nrow = nrow(pes_wt_with_sims), ncol = 100)
tau_l[,1] <- tau_k[, 100] + .001
test_l[,1] <- (psi - tau_l[1]) - (pes_wt_with_sims$a+pes_wt_with_sims$b1*exp(pes_wt_with_sims$b2*tau_l[,1]))
tau_l[,1] <- ifelse( test_l[,1] < .001 &  test_l[,1] > 0,  tau_l[,1], tau_k[, 100])
l <- 2
for(l in 2:100){
tau_l[,l]  <- tau_l[, l-1] + l*.001
test_l[,l] <- (psi - tau_l[,l]) - (pes_wt_with_sims$a+pes_wt_with_sims$b1*exp(pes_wt_with_sims$b2*tau_l[,l] ))
tau_l[,l] <- ifelse(test_l[,l] < .001 &  test_l[,l] > 0,  tau_l[,l], tau_l[,l-1])
l <- l + 1
}
baseline_estimates_weights <- cbind.data.frame(pes_wt_with_sims, tau_l[,100]) %>%
group_by(state_Rnls) %>%
summarize_if(is.numeric, mean) %>%
rename(tau = `tau_l[, 100]`)
head(baseline_estimates_weights)
write.csv(baseline_estimates_weights, "~/Dropbox (MIT)/Code for America/Impact Metrics/cfa_povertyalleviation_downloadfolder/state_pars_with_weights.csv")
baseline_estimates_weights <- cbind.data.frame(pes_wt_with_sims, tau_l[,100]) %>%
group_by(state_Rnls) %>%
summarize_if(is.numeric, mean) %>%
rename(tau = `tau_l[, 100]`)
write.csv(baseline_estimates_weights, "/Users/blair@codeforamerica.org/Documents/GitHub/cfa_povertyalleviation/state_pars_with_weights.csv")
head(baseline_estimates_weights)
head(baseline_estimates)
#### COMPARE WEIGHTED AND UNWEIGHTED VALUES ####
baseline_estimates_weights_TMP <- baseline_estimates_weights
colnames(baseline_estimates_weights_TMP) <- paste(colnames(baseline_estimates_weights), "_weights")
#### COMPARE WEIGHTED AND UNWEIGHTED VALUES ####
baseline_estimates_weights_TMP <- baseline_estimates_weights %>%
dplyr::select(c(state_Rnls, a_Rnls, b1_Rnls, b2_Rnls, tau))
colnames(baseline_estimates_weights_TMP) <- paste(colnames(baseline_estimates_weights_TMP), "_weights")
head(baseline_estimates_weights_TMP)
#### COMPARE WEIGHTED AND UNWEIGHTED VALUES ####
baseline_estimates_weights_TMP <- baseline_estimates_weights %>%
dplyr::select(c(state_Rnls, a_Rnls, b1_Rnls, b2_Rnls, tau))
colnames(baseline_estimates_weights_TMP) <- paste(colnames(baseline_estimates_weights_TMP), "_weights", sep = "")
head(baseline_estimates_weights_TMP)
compare_ests <- baseline_estimates %>%
dplyr::select(c(state_Rnls, a_Rnls, b1_Rnls, b2_Rnls, tau)) %>%
left_join(., baseline_estimates_weights_TMP, by = c("state_Rnls" = "state_Rnls_weights"))
dim(compare_ests)
head(compare_ests)
compare_ests <- baseline_estimates %>%
dplyr::select(c(state_Rnls, a_Rnls, b1_Rnls, b2_Rnls, tau)) %>%
left_join(., baseline_estimates_weights_TMP, by = c("state_Rnls" = "state_Rnls_weights")) %>%
pivot_longer(-state_Rnls)
compare_ests
compare_ests <- baseline_estimates %>%
dplyr::select(c(state_Rnls, a_Rnls, b1_Rnls, b2_Rnls, tau)) %>%
left_join(., baseline_estimates_weights_TMP, by = c("state_Rnls" = "state_Rnls_weights")) %>%
pivot_longer(-state_Rnls) %>%
mutate(source = ifelse(grepl("weights", name), "with weights", "without weights"))
compare_ests
compare_ests <- baseline_estimates %>%
dplyr::select(c(state_Rnls, a_Rnls, b1_Rnls, b2_Rnls, tau)) %>%
left_join(., baseline_estimates_weights_TMP, by = c("state_Rnls" = "state_Rnls_weights")) %>%
pivot_longer(-state_Rnls) %>%
mutate(source = ifelse(grepl("weights", name), "with weights", "without weights"),
name = gsub("_Rnls", "", name))
compare_ests
compare_ests <- baseline_estimates %>%
dplyr::select(c(state_Rnls, a_Rnls, b1_Rnls, b2_Rnls, tau)) %>%
left_join(., baseline_estimates_weights_TMP, by = c("state_Rnls" = "state_Rnls_weights")) %>%
pivot_longer(-state_Rnls) %>%
mutate(source = ifelse(grepl("weights", name), "with weights", "without weights"),
name = gsub("_Rnls", "", name),
name = gsub("_weights", "", name))
compare_ests
compare_ests <- baseline_estimates %>%
dplyr::select(c(state_Rnls, a_Rnls, b1_Rnls, b2_Rnls, tau)) %>%
left_join(., baseline_estimates_weights_TMP, by = c("state_Rnls" = "state_Rnls_weights")) %>%
pivot_longer(-state_Rnls) %>%
mutate(source = ifelse(grepl("weights", name), "with weights", "without weights"),
name = gsub("_Rnls", "", name),
name = gsub("_weights", "", name)) %>%
pivot_wider(values_from = value, names_from = source)
compare_ests
compare_ests <- baseline_estimates %>%
dplyr::select(c(state_Rnls, a_Rnls, b1_Rnls, b2_Rnls, tau)) %>%
left_join(., baseline_estimates_weights_TMP, by = c("state_Rnls" = "state_Rnls_weights")) %>%
pivot_longer(-state_Rnls) %>%
mutate(source = ifelse(grepl("weights", name), "with weights", "without weights"),
name = gsub("_Rnls", "", name),
name = gsub("_weights", "", name)) %>%
pivot_wider(values_from = value, names_from = source) %>%
ggplot(., aes(x = `without weights`, y = `with weights`)) + geom_scatterplot() +
facet_wrap(~ name) +
theme_bw()
library(ggplot2)
compare_ests <- baseline_estimates %>%
dplyr::select(c(state_Rnls, a_Rnls, b1_Rnls, b2_Rnls, tau)) %>%
left_join(., baseline_estimates_weights_TMP, by = c("state_Rnls" = "state_Rnls_weights")) %>%
pivot_longer(-state_Rnls) %>%
mutate(source = ifelse(grepl("weights", name), "with weights", "without weights"),
name = gsub("_Rnls", "", name),
name = gsub("_weights", "", name)) %>%
pivot_wider(values_from = value, names_from = source) %>%
ggplot(., aes(x = `without weights`, y = `with weights`)) + geom_points() +
facet_wrap(~ name) +
theme_bw()
compare_ests
?geom_points
compare_ests <- baseline_estimates %>%
dplyr::select(c(state_Rnls, a_Rnls, b1_Rnls, b2_Rnls, tau)) %>%
left_join(., baseline_estimates_weights_TMP, by = c("state_Rnls" = "state_Rnls_weights")) %>%
pivot_longer(-state_Rnls) %>%
mutate(source = ifelse(grepl("weights", name), "with weights", "without weights"),
name = gsub("_Rnls", "", name),
name = gsub("_weights", "", name)) %>%
pivot_wider(values_from = value, names_from = source) %>%
ggplot(., aes(x = `without weights`, y = `with weights`)) + geom_point() +
facet_wrap(~ name) +
theme_bw()
compare_ests
compare_ests <- baseline_estimates %>%
dplyr::select(c(state_Rnls, a_Rnls, b1_Rnls, b2_Rnls, tau)) %>%
left_join(., baseline_estimates_weights_TMP, by = c("state_Rnls" = "state_Rnls_weights")) %>%
pivot_longer(-state_Rnls) %>%
mutate(source = ifelse(grepl("weights", name), "with weights", "without weights"),
name = gsub("_Rnls", "", name),
name = gsub("_weights", "", name)) %>%
pivot_wider(values_from = value, names_from = source) %>%
ggplot(., aes(x = `without weights`, y = `with weights`)) + geom_point() +
facet_wrap(~ name, scales = "free") +
theme_bw()
compare_ests
compare_ests <- baseline_estimates %>%
dplyr::select(c(state_Rnls, a_Rnls, b1_Rnls, b2_Rnls, tau)) %>%
left_join(., baseline_estimates_weights_TMP, by = c("state_Rnls" = "state_Rnls_weights")) %>%
pivot_longer(-state_Rnls) %>%
mutate(source = ifelse(grepl("weights", name), "with weights", "without weights"),
name = gsub("_Rnls", "", name),
name = gsub("_weights", "", name)) %>%
pivot_wider(values_from = value, names_from = source) %>%
ggplot(., aes(x = `without weights`, y = `with weights`)) + geom_point() +
geom_abline() +
facet_wrap(~ name, scales = "free") +
theme_bw()
compare_ests
compare_ests <- baseline_estimates %>%
dplyr::select(c(state_Rnls, a_Rnls, b1_Rnls, b2_Rnls, tau)) %>%
left_join(., baseline_estimates_weights_TMP, by = c("state_Rnls" = "state_Rnls_weights")) %>%
pivot_longer(-state_Rnls) %>%
mutate(source = ifelse(grepl("weights", name), "with weights", "without weights"),
name = gsub("_Rnls", "", name),
name = gsub("_weights", "", name)) %>%
pivot_wider(values_from = value, names_from = source) %>%
ggplot(., aes(x = `without weights`, y = `with weights`)) + geom_point() +
geom_abline() +
facet_wrap(~ name, scales = "free") +
theme_bw()
compare_ests
write.csv(baseline_estimates_weights, "/Users/blair@codeforamerica.org/Documents/GitHub/cfa_povertyalleviation/state_pars_with_weights.csv")
install.packages("googlesheets")
av <- available.packages(filters=list())
av[av[, "Package"] == pkg, ]
av <- available.packages(filters=list())
av[av[, "googlesheets"] == pkg, ]
av <- available.packages(filters=list())
av[av[, "Package"] == "googlesheets", ]
View(baseline_estimates_weights)
colnames(baseline_estimates_weights)
colnames(baseline_estimates_weights)
